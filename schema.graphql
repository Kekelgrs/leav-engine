
                    extend type Query {
                        me: User
                    }
                

                    enum ActionIOTypes {
                        string
                        number
                        boolean
                        object
                    }

                    enum AvailableActionsName {
                        encrypt formatDate formatNumber maskValue parseJSON toBoolean toJSON toNumber toString validateFormat validateRegex
                    }

                    type ActionParam {
                        name: String!,
                        type: String!,
                        description: String,
                        required: Boolean,
                        default_value: String
                    }

                    type Action {
                        name: AvailableActionsName!,
                        description: String,
                        input_types: [ActionIOTypes!]!,
                        output_types: [ActionIOTypes!]!,
                        params: [ActionParam!]
                    }

                    type ActionConfiguration {
                        name: String!,
                        is_system: Boolean!,
                        params: [ActionConfigurationParam!]
                    }

                    type ActionsListConfiguration {
                        saveValue: [ActionConfiguration!]
                        getValue: [ActionConfiguration!]
                        deleteValue: [ActionConfiguration!]
                    }

                    input ActionsListConfigurationInput {
                        saveValue: [ActionConfigurationInput!]
                        getValue: [ActionConfigurationInput!]
                        deleteValue: [ActionConfigurationInput!]
                    }

                    input ActionConfigurationInput {
                        name: AvailableActionsName!,
                        params: [ActionConfigurationParamInput!]
                    }

                    type ActionConfigurationParam {
                        name: String!,
                        value: String!
                    }

                    input ActionConfigurationParamInput {
                        name: String!,
                        value: String!
                    }

                    extend type Query {
                        availableActions: [Action!]
                    }
                

                    enum AttributeType {
                        simple simple_link advanced advanced_link tree
                    }

                    enum AttributeFormat {
                        text numeric date encrypted boolean extended
                    }

                    enum ValueVersionMode {
                        simple
                        smart
                    }

                    enum IOTypes {
                        string
                        number
                        boolean
                        object
                    }

                    type ActionListIOTypes {
                        saveValue: [IOTypes!]!,deleteValue: [IOTypes!]!,getValue: [IOTypes!]!
                    }

                    # Application Attribute
                    type Attribute {
                        id: ID!,
                        type: AttributeType!,
                        format: AttributeFormat,
                        system: Boolean!,
                        label(lang: [AvailableLanguage!]): SystemTranslation,
                        linked_library: String,
                        linked_tree: String,
                        embedded_fields: [EmbeddedAttribute],
                        actions_list: ActionsListConfiguration,
                        permissions_conf: Treepermissions_conf,
                        multiple_values: Boolean!,
                        versions_conf: ValuesVersionsConf,
                        input_types: ActionListIOTypes!,
                        output_types: ActionListIOTypes!,
                        metadata_fields: [Attribute!]
                    }

                    input AttributeInput {
                        id: ID!
                        type: AttributeType
                        format: AttributeFormat
                        label: SystemTranslationInput,
                        linked_library: String,
                        linked_tree: String,
                        embedded_fields: [EmbeddedAttributeInput],
                        actions_list: ActionsListConfigurationInput,
                        permissions_conf: Treepermissions_confInput,
                        multiple_values: Boolean,
                        versions_conf: ValuesVersionsConfInput,
                        metadata_fields: [String!]
                    }

                    type EmbeddedAttribute {
                        id: ID!,
                        format: AttributeFormat,
                        label: SystemTranslation,
                        validation_regex: String,
                        embedded_fields: [EmbeddedAttribute]
                    }

                    input EmbeddedAttributeInput {
                        id: ID!
                        format: AttributeFormat
                        label: SystemTranslationInput,
                        validation_regex: String,
                        embedded_fields: [EmbeddedAttributeInput]
                    }

                    type ValuesVersionsConf {
                        versionable: Boolean!,
                        mode: ValueVersionMode,
                        trees: [String!]
                    }

                    input ValuesVersionsConfInput {
                        versionable: Boolean!,
                        mode: ValueVersionMode,
                        trees: [String!]
                    }

                    input AttributesFiltersInput {
                        id: ID,
                        type: [AttributeType],
                        format: [AttributeFormat],
                        label: String,
                        system: Boolean,
                        multiple_values: Boolean,
                        versionable: Boolean
                    }

                    type AttributesList {
                        totalCount: Int!,
                        list: [Attribute!]!
                    }

                    enum AttributesSortableFields {
                        id
                        type
                        format
                        linked_library
                        linked_tree
                        multiple_values
                    }

                    input SortAttributes {
                        field: AttributesSortableFields!
                        order: SortOrder
                    }

                    extend type Query {
                        attributes(
                            filters: AttributesFiltersInput,
                            pagination: Pagination,
                            sort: SortAttributes
                        ): AttributesList
                    }

                    extend type Mutation {
                        saveAttribute(attribute: AttributeInput): Attribute!
                        deleteAttribute(id: ID): Attribute!
                    }
                

                    scalar JSON
                    scalar JSONObject
                    scalar Any

                    enum AvailableLanguage {
                        fr en
                    }

                    scalar SystemTranslation

                    input Pagination {
                        limit: Int!,
                        offset: Int!
                    }

                    enum SortOrder {
                        asc
                        desc
                    }

                    input SystemTranslationInput {
                        fr: String!,en: String
                    }
                

                    enum LibraryBehavior {
                        standard files
                    }

                    # Specific names generated to query this library on GraphQL
                    type LibraryGraphqlNames {
                        query: String!,
                        type: String!,
                        list: String!,
                        searchableFields: String!,
                        filter: String!
                    }

                    # Application Library
                    type Library {
                        id: ID!,
                        system: Boolean,
                        label(lang: [AvailableLanguage!]): SystemTranslation,
                        behavior: LibraryBehavior!,
                        attributes: [Attribute!],
                        permissions_conf: Treepermissions_conf,
                        recordIdentityConf: RecordIdentityConf,
                        gqlNames: LibraryGraphqlNames!
                    }

                    input LibraryInput {
                        id: ID!
                        label: SystemTranslationInput,
                        attributes: [ID!],
                        behavior: LibraryBehavior,
                        permissions_conf: Treepermissions_confInput,
                        recordIdentityConf: RecordIdentityConfInput
                    }

                    input LibrariesFiltersInput {
                        id: ID,
                        label: String,
                        system: Boolean,
                        behavior: [LibraryBehavior!]
                    }

                    type LibrariesList {
                        totalCount: Int!,
                        list: [Library!]!
                    }

                    enum LibrariesSortableFields {
                        id
                        system
                        behavior
                    }

                    input SortLibraries {
                        field: LibrariesSortableFields!
                        order: SortOrder
                    }

                    type Query {
                        libraries(
                            filters: LibrariesFiltersInput,
                            pagination: Pagination,
                            sort: SortLibraries
                        ): LibrariesList
                    }

                    type Mutation {
                        saveLibrary(library: LibraryInput): Library!
                        deleteLibrary(id: ID): Library!
                    }
                
                    type File implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_by: User,created_at: String,modified_by: User,modified_at: String,root_key: String,is_directory: Boolean,file_path: String,file_name: String,inode: Int,previews: JSONObject,previews_status: JSONObject,active: Boolean
                    }

                    type FileList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [File!]!
                    }

                    enum FileSearchableFields {
                        id created_by created_at modified_by modified_at root_key is_directory file_path file_name inode previews previews_status active
                    }

                    input FileFilter {
                        field: FileSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        files(
                            filters: [FileFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): FileList!
                    }
                
                    type MetadataTestLib implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean,metadata_attribute: String
                    }

                    type MetadataTestLibList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [MetadataTestLib!]!
                    }

                    enum MetadataTestLibSearchableFields {
                        id created_at created_by modified_at modified_by active metadata_attribute
                    }

                    input MetadataTestLibFilter {
                        field: MetadataTestLibSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        metadataTestLib(
                            filters: [MetadataTestLibFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): MetadataTestLibList!
                    }
                
                    type PermTreeLib implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        active: Boolean,test_attr_permission: TreeNode,attr_perm_test: String,id: ID!,modified_by: User,modified_at: String,created_by: User,created_at: String
                    }

                    type PermTreeLibList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [PermTreeLib!]!
                    }

                    enum PermTreeLibSearchableFields {
                        active test_attr_permission attr_perm_test id modified_by modified_at created_by created_at
                    }

                    input PermTreeLibFilter {
                        field: PermTreeLibSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        permTreeLib(
                            filters: [PermTreeLibFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): PermTreeLibList!
                    }
                
                    type RecordLibraryTest implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type RecordLibraryTestList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [RecordLibraryTest!]!
                    }

                    enum RecordLibraryTestSearchableFields {
                        id created_at created_by modified_at modified_by active
                    }

                    input RecordLibraryTestFilter {
                        field: RecordLibraryTestSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        recordLibraryTest(
                            filters: [RecordLibraryTestFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): RecordLibraryTestList!
                    }
                
                    type TestLibHeritPerm implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type TestLibHeritPermList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [TestLibHeritPerm!]!
                    }

                    enum TestLibHeritPermSearchableFields {
                        id created_at created_by modified_at modified_by active
                    }

                    input TestLibHeritPermFilter {
                        field: TestLibHeritPermSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        testLibHeritPerm(
                            filters: [TestLibHeritPermFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): TestLibHeritPermList!
                    }
                
                    type TestLibHeritPermTreeElement implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type TestLibHeritPermTreeElementList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [TestLibHeritPermTreeElement!]!
                    }

                    enum TestLibHeritPermTreeElementSearchableFields {
                        id created_at created_by modified_at modified_by active
                    }

                    input TestLibHeritPermTreeElementFilter {
                        field: TestLibHeritPermTreeElementSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        testLibHeritPermTreeElement(
                            filters: [TestLibHeritPermTreeElementFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): TestLibHeritPermTreeElementList!
                    }
                
                    type TestLibPermission implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        active: Boolean,test_attr_permission: TreeNode,id: ID!,modified_by: User,modified_at: String,created_by: User,created_at: String
                    }

                    type TestLibPermissionList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [TestLibPermission!]!
                    }

                    enum TestLibPermissionSearchableFields {
                        active test_attr_permission id modified_by modified_at created_by created_at
                    }

                    input TestLibPermissionFilter {
                        field: TestLibPermissionSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        testLibPermission(
                            filters: [TestLibPermissionFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): TestLibPermissionList!
                    }
                
                    type TreesLibraryTest implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        active: Boolean,values_attribute_test_tree: TreeNode,id: ID!,modified_by: User,modified_at: String,created_by: User,created_at: String
                    }

                    type TreesLibraryTestList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [TreesLibraryTest!]!
                    }

                    enum TreesLibraryTestSearchableFields {
                        active values_attribute_test_tree id modified_by modified_at created_by created_at
                    }

                    input TreesLibraryTestFilter {
                        field: TreesLibraryTestSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        treesLibraryTest(
                            filters: [TreesLibraryTestFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): TreesLibraryTestList!
                    }
                
                    type User implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_by: User,created_at: String,modified_by: User,modified_at: String,login: String,password: String,user_groups: TreeNode,active: Boolean
                    }

                    type UserList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [User!]!
                    }

                    enum UserSearchableFields {
                        id created_by created_at modified_by modified_at login password user_groups active
                    }

                    input UserFilter {
                        field: UserSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        users(
                            filters: [UserFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): UserList!
                    }
                
                    type UsersGroup implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type UsersGroupList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [UsersGroup!]!
                    }

                    enum UsersGroupSearchableFields {
                        id created_at created_by modified_at modified_by active
                    }

                    input UsersGroupFilter {
                        field: UsersGroupSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        usersGroups(
                            filters: [UsersGroupFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): UsersGroupList!
                    }
                
                    type ValuesLibraryTest implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean,values_attribute_test_simple: String,values_attribute_test_adv: String,values_attribute_test_simple_link: ValuesLibraryTest,values_attribute_test_adv_link: ValuesLibraryTest
                    }

                    type ValuesLibraryTestList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [ValuesLibraryTest!]!
                    }

                    enum ValuesLibraryTestSearchableFields {
                        id created_at created_by modified_at modified_by active values_attribute_test_simple values_attribute_test_adv values_attribute_test_simple_link values_attribute_test_adv_link
                    }

                    input ValuesLibraryTestFilter {
                        field: ValuesLibraryTestSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        valuesLibraryTest(
                            filters: [ValuesLibraryTestFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): ValuesLibraryTestList!
                    }
                
                    type VersionsLibraryTest implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        active: Boolean,versions_attribute_test: String,id: ID!,modified_by: User,modified_at: String,created_by: User,created_at: String
                    }

                    type VersionsLibraryTestList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [VersionsLibraryTest!]!
                    }

                    enum VersionsLibraryTestSearchableFields {
                        active versions_attribute_test id modified_by modified_at created_by created_at
                    }

                    input VersionsLibraryTestFilter {
                        field: VersionsLibraryTestSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        versionsLibraryTest(
                            filters: [VersionsLibraryTestFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): VersionsLibraryTestList!
                    }
                
                    type VersionsLibraryTreeTest implements Record {
                        library: Library!,
                        whoAmI: RecordIdentity!,
                        property(attribute: ID!): [GenericValue!],
                        id: ID!,created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type VersionsLibraryTreeTestList {
                        totalCount: Int,
                        cursor: RecordsListCursor,
                        list: [VersionsLibraryTreeTest!]!
                    }

                    enum VersionsLibraryTreeTestSearchableFields {
                        id created_at created_by modified_at modified_by active
                    }

                    input VersionsLibraryTreeTestFilter {
                        field: VersionsLibraryTreeTestSearchableFields!,
                        value: String!
                    }

                    extend type Query {
                        versionsLibraryTreeTest(
                            filters: [VersionsLibraryTreeTestFilter],
                            version: [ValueVersionInput],
                            pagination: RecordsPagination,
                            retrieveInactive: Boolean
                        ): VersionsLibraryTreeTestList!
                    }
                

                    enum PermissionsRelation {
                        and or
                    }

                    enum PermissionTypes {
                        record attribute admin library
                    }

                    enum PermissionsActions {
                        access create edit delete
                        access_attribute create_value edit_value delete_value
                        admin_access_libraries admin_create_library admin_edit_library admin_delete_library admin_access_attributes admin_create_attribute admin_edit_attribute admin_delete_attribute admin_access_trees admin_create_tree admin_edit_tree admin_delete_tree admin_access_permissions admin_edit_permission admin_access_navigator
                    }

                    type HeritedPermissionAction {
                        name: PermissionsActions!
                        allowed: Boolean!
                    }

                    type PermissionAction {
                        name: PermissionsActions!
                        allowed: Boolean
                    }

                    input PermissionActionInput {
                        name: PermissionsActions!,
                        allowed: Boolean
                    }

                    type Treepermissions_conf {
                        permissionTreeAttributes: [Attribute!]!,
                        relation: PermissionsRelation!
                    }

                    input Treepermissions_confInput {
                        permissionTreeAttributes: [ID!]!,
                        relation: PermissionsRelation!
                    }

                    # If id and library are not specified, permission will apply to tree root
                    type PermissionsTreeTarget {
                        tree: ID!,
                        library: ID,
                        id: ID
                    }

                    # If id and library are not specified, permission will apply to tree root
                    input PermissionsTreeTargetInput {
                        tree: ID!,
                        library: ID,
                        id: ID
                    }

                    # A "null" users groups means this permission applies at root level. A "null" on tree target's
                    # id for tree-based permission means it applies to root level on this tree.
                    type Permission {
                        type: PermissionTypes!,
                        applyTo: ID,
                        usersGroup: ID,
                        actions: [PermissionAction!]!,
                        permissionTreeTarget: PermissionsTreeTarget
                    }

                    # If users group is not specified, permission will be saved at root level.
                    # If saving a tree-based permission (record or attribute) and tree target's id is not specified,
                    # permission will be saved at root level for any element of the tree.
                    input PermissionInput {
                        type: PermissionTypes!,
                        applyTo: ID,
                        usersGroup: ID,
                        actions: [PermissionActionInput!]!,
                        permissionTreeTarget: PermissionsTreeTargetInput
                    }

                    # Element on which we want to retrieve record or attribute permission. Record ID is mandatory,
                    # attributeId is only required for attribute permission
                    input PermissionTarget {
                        attributeId: ID,
                        recordId: ID!
                    }

                    extend type Query {
                        # Return permissions (applying heritage) for current user
                        isAllowed(
                            type: PermissionTypes!,
                            applyTo: ID,
                            actions: [PermissionsActions!]!,
                            target: PermissionTarget
                        ): [PermissionAction!],

                        # Return saved permissions (no heritage) for given user group
                        permissions(
                            type: PermissionTypes!,
                            applyTo: ID,
                            actions: [PermissionsActions!]!,
                            usersGroup: ID,
                            permissionTreeTarget: PermissionsTreeTargetInput
                        ): [PermissionAction!],

                        # Return herited permissions only for given user group
                        heritedPermissions(
                            type: PermissionTypes!,
                            applyTo: ID,
                            actions: [PermissionsActions!]!,
                            userGroupId: ID,
                            permissionTreeTarget: PermissionsTreeTargetInput
                        ): [HeritedPermissionAction!]
                    }

                    extend type Mutation {
                        savePermission(permission: PermissionInput): Permission!
                    }
                

                    type Plugin {
                        name: String!,
                        description: String,
                        version: String,
                        author: String
                    }

                    extend type Query {
                        plugins: [Plugin!]!
                    }
                

                    interface Record {
                        id: ID!,
                        library: Library!,
                        whoAmI: RecordIdentity!
                        property(attribute: ID!): [GenericValue!]
                        created_at: String,created_by: User,modified_at: String,modified_by: User,active: Boolean
                    }

                    type RecordIdentity {
                        id: ID!,
                        library: Library!,
                        label: String,
                        color: String,
                        preview: Preview
                    }

                    type Preview {
                        small: String,
                        medium: String,
                        big: String,
                    }

                    type RecordIdentityConf {
                        label: ID,
                        color: ID,
                        preview: ID
                    }

                    input RecordIdentityConfInput {
                        label: ID,
                        color: ID,
                        preview: ID
                    }

                    # Records support on both offset and cursor. Cannot use both at the same time.
                    # If none is supplied, it will apply an offset 0. Cursors are always returned along the results
                    # ⚠️Sorting is disallowed when using cursor pagination
                    input RecordsPagination {
                        limit: Int!,
                        cursor: String,
                        offset: Int
                    }

                    # Cursors to use for navigation among a record list.
                    # If one a the cursors is null, it means there's nothing more to see in this direction
                    type RecordsListCursor {
                        prev: String,
                        next: String
                    }

                    extend type Mutation {
                        createRecord(library: ID): Record!
                        deleteRecord(library: ID, id: ID): Record!
                    }
                

                    scalar FullTreeContent

                    enum TreeBehavior {
                        standard files
                    }

                    # Application TRee
                    type Tree {
                        id: ID!,
                        system: Boolean!,
                        libraries: [Library!]!,
                        behavior: TreeBehavior!,
                        label(lang: [AvailableLanguage!]): SystemTranslation
                    }

                    input TreeInput {
                        id: ID!
                        libraries: [String!],
                        behavior: TreeBehavior,
                        label: SystemTranslationInput
                    }

                    type TreeElement {
                        id: ID,
                        library: String
                    }

                    type TreeNode {
                        order: Int!,
                        record: Record!,
                        ancestors: [TreeNode!],
                        children: [TreeNode!],
                        linkedRecords(attribute: ID): [Record!]
                    }

                    input TreeElementInput {
                        id: ID!,
                        library: String!
                    }

                    input TreesFiltersInput {
                        id: ID,
                        label: String,
                        system: Boolean,
                        behavior: TreeBehavior
                    }

                    type TreesList {
                        totalCount: Int!,
                        list: [Tree!]!
                    }

                    enum TreesSortableFields {
                        id
                        system
                        behavior
                    }

                    input SortTrees {
                        field: TreesSortableFields!
                        order: SortOrder
                    }

                    extend type Query {
                        trees(
                            filters: TreesFiltersInput,
                            pagination: Pagination,
                            sort: SortTrees
                        ): TreesList

                        # Retrieve tree content.
                        # If startAt is specified, it returns this element's children. Otherwise, it starts
                        # from tree root
                        treeContent(treeId: ID!, startAt: TreeElementInput): [TreeNode!]

                        # Retrieve full tree content form tree root, as an object.
                        fullTreeContent(treeId: ID!): FullTreeContent
                    }

                    extend type Mutation {
                        saveTree(tree: TreeInput!): Tree!
                        deleteTree(id: ID!): Tree!
                        treeAddElement(
                            treeId: ID!,
                            element: TreeElementInput!,
                            parent: TreeElementInput,
                            order: Int
                        ): TreeElement!
                        treeMoveElement(
                            treeId: ID!,
                            element: TreeElementInput!,
                            parentTo: TreeElementInput,
                            order: Int
                        ): TreeElement!
                        treeDeleteElement(
                            treeId: ID!,
                            element: TreeElementInput!,
                            deleteChildren: Boolean
                        ): TreeElement!
                    }
                

                    scalar ValueVersion
                    scalar ValueMetadata

                    input ValueVersionInput {
                        name: String!,
                        value: TreeElementInput!
                    }

                    interface GenericValue {
                        id_value: ID,
                        modified_at: Int,
                        created_at: Int,
                        version: ValueVersion,
                        attribute: ID,
                        metadata: ValueMetadata
                    }

                    type Value implements GenericValue {
                        id_value: ID,
                        value: String,
                        raw_value: String,
                        modified_at: Int,
                        created_at: Int,
                        version: ValueVersion,
                        attribute: ID,
                        metadata: ValueMetadata
                    }

                    type saveValueBatchResult {
                        values: [Value!],
                        errors: [ValueBatchError!]
                    }

                    type ValueBatchError {
                        type: String!,
                        attribute: String!,
                        input: String,
                        message: String!
                    }

                    input ValueMetadataInput {
                        name: String!,
                        value: String
                    }

                    type LinkValue implements GenericValue {
                        id_value: ID,
                        value: Record!,
                        modified_at: Int,
                        created_at: Int,
                        version: ValueVersion,
                        attribute: ID,
                        metadata: ValueMetadata
                    }

                    type TreeValue implements GenericValue {
                        id_value: ID!,
                        modified_at: Int!,
                        created_at: Int!
                        value: TreeNode!,
                        version: ValueVersion,
                        attribute: ID,
                        metadata: ValueMetadata
                    }

                    input ValueInput {
                        id_value: ID,
                        value: String,
                        metadata: [ValueMetadataInput],
                        version: [ValueVersionInput]
                    }

                    input ValueBatchInput {
                        attribute: ID,
                        id_value: ID,
                        value: String,
                        metadata: ValueMetadata
                    }

                    extend type Mutation {
                        # Save one value
                        saveValue(library: ID, recordId: ID, attribute: ID, value: ValueInput): Value!
                        # Save values for several attributes at once.
                        # If deleteEmpty is true, empty values will be deleted
                        saveValueBatch(
                            library: ID,
                            recordId: ID,
                            version: [ValueVersionInput],
                            values: [ValueBatchInput],
                            deleteEmpty: Boolean
                        ): saveValueBatchResult!
                        deleteValue(library: ID, recordId: ID, attribute: ID, value: ValueInput): Value!
                    }
                

                extend type Query {
                    myTemplatePlugin: String
                }