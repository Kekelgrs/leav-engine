// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TreeRepo AddElement Should add an element to the root 1`] = `"INSERT {_from: @value0, _to: @value1} IN @@value2 RETURN NEW"`;

exports[`TreeRepo AddElement Should add an element to the root 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": "core_trees/test_tree",
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo AddElement Should add an element under another 1`] = `"INSERT {_from: @value0, _to: @value1} IN @@value2 RETURN NEW"`;

exports[`TreeRepo AddElement Should add an element under another 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": "test_lib2/6789",
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 1`] = `
"
                    LET edges = (
                        FOR v, e IN 0..@value0 OUTBOUND @value1
                        @@value2
                        RETURN e
                    )
                    FOR ed IN edges
                        FILTER ed != null
                        REMOVE ed IN @@value2
                        RETURN OLD
                "
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 3`] = `
"
                FOR e IN @@value0
                    FILTER e._to == @value1
                    REMOVE e IN @@value0
                    RETURN OLD
            "
`;

exports[`TreeRepo DeleteElement Should delete an element and its children 4`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 1`] = `
"
                    FOR v IN 1 OUTBOUND @value0
                    @@value1
                    RETURN v
                "
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 2`] = `
Object {
  "@value1": "core_edge_tree_test_tree",
  "value0": "test_lib/13445",
}
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 3`] = `
"
                FOR e IN @@value0
                    FILTER e._to == @value1
                    REMOVE e IN @@value0
                    RETURN OLD
            "
`;

exports[`TreeRepo DeleteElement Should delete an element and move its children up 4`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo MoveElement Should move an element 1`] = `
"
                    FOR e IN @@value0
                        FILTER e._to == @value1
                        UPDATE e WITH {_from: @value2, _to: @value1}
                        IN @@value0
                        RETURN NEW
                "
`;

exports[`TreeRepo MoveElement Should move an element 2`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "test_lib/13445",
  "value2": "users/6789",
}
`;

exports[`TreeRepo createTree Should create a tree 1`] = `"INSERT @value0 IN @@value1 RETURN NEW"`;

exports[`TreeRepo createTree Should create a tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
    "label": Object {
      "en": "test",
      "fr": "test",
    },
    "libraries": Array [
      "test_lib",
      "test_lib2",
    ],
    "system": false,
  },
}
`;

exports[`TreeRepo deleteTree Should delete tree 1`] = `"REMOVE @value0 IN @@value1 RETURN OLD"`;

exports[`TreeRepo deleteTree Should delete tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
  },
}
`;

exports[`TreeRepo getElementChildren Should return element children 1`] = `
"
                FOR v
                    IN 1 OUTBOUND @value0
                    @@value1
                    RETURN v
            "
`;

exports[`TreeRepo getElementChildren Should return element children 2`] = `
Object {
  "@value1": "core_edge_tree_test_tree",
  "value0": "images/123458",
}
`;

exports[`TreeRepo getElementParents Should return element parents 1`] = `
"
                FOR v,e,p
                    IN 0..@value0 INBOUND @value1
                    @@value2
                    SORT COUNT(p.edges) DESC
                    FILTER v._id != @value3
                    RETURN v
            "
`;

exports[`TreeRepo getElementParents Should return element parents 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "images/123458",
  "value3": "core_trees/test_tree",
}
`;

exports[`TreeRepo getLinkedRecords Should return linked records 1`] = `
"
                FOR v,e,p
                    IN 1 INBOUND @value0
                    @@value1
                    FILTER e.attribute == @value2
                    RETURN v
            "
`;

exports[`TreeRepo getLinkedRecords Should return linked records 2`] = `
Object {
  "@value1": "core_edge_values_links",
  "value0": "images/123458",
  "value2": "test_attr",
}
`;

exports[`TreeRepo getTreeContent Should return content of a tree starting from a given node 1`] = `
"
                FOR v, e, p IN 1..@value0 OUTBOUND @value1
                @@value2
                LET path = (FOR pv IN p.vertices RETURN pv._id)
                RETURN MERGE(v, {path})
            "
`;

exports[`TreeRepo getTreeContent Should return content of a tree starting from a given node 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "categories/223588185",
}
`;

exports[`TreeRepo getTreeContent Should return full content of a tree 1`] = `
"
                FOR v, e, p IN 1..@value0 OUTBOUND @value1
                @@value2
                LET path = (FOR pv IN p.vertices RETURN pv._id)
                RETURN MERGE(v, {path})
            "
`;

exports[`TreeRepo getTreeContent Should return full content of a tree 2`] = `
Object {
  "@value2": "core_edge_tree_test_tree",
  "value0": 1000,
  "value1": "core_trees/test_tree",
}
`;

exports[`TreeRepo getTrees Should filter trees 1`] = `"FOR l IN core_trees FILTER l.@filterKey0 == @filterValue0 FILTER l.@filterKey1 == @filterValue1 RETURN l"`;

exports[`TreeRepo getTrees Should filter trees 2`] = `
Object {
  "filterKey0": "_key",
  "filterKey1": "system",
  "filterValue0": "test",
  "filterValue1": "false",
}
`;

exports[`TreeRepo getTrees Should return all trees 1`] = `"FOR l IN core_trees RETURN l"`;

exports[`TreeRepo getTrees Should return all trees 2`] = `Object {}`;

exports[`TreeRepo isElementPresent Should check if an element is present in the tree 1`] = `
"
                FOR e IN @@value0
                    FILTER e._to == @value1
                    RETURN e
            "
`;

exports[`TreeRepo isElementPresent Should check if an element is present in the tree 2`] = `
Object {
  "@value0": "core_edge_tree_test_tree",
  "value1": "test_lib/13445",
}
`;

exports[`TreeRepo updateTree Should update a tree 1`] = `"UPDATE @value0 IN @@value1 RETURN NEW"`;

exports[`TreeRepo updateTree Should update a tree 2`] = `
Object {
  "@value1": "core_trees",
  "value0": Object {
    "_key": "test_tree",
    "label": Object {
      "en": "test",
      "fr": "test",
    },
    "libraries": Array [
      "test_lib",
      "test_lib2",
    ],
    "system": false,
  },
}
`;
